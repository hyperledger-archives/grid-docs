# Copyright 2021-2022 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.0
info:
  version: 0.4.0
  title: Grid Daemon REST API
  description: A REST API providing HTTP/JSON interface to Hyperledger Grid.
  contact:
    name: Hyperledger Grid community
    url: https://grid.hyperledger.org/community/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
externalDocs:
  description: |
    For more information about how to create Sabre batches, please see the
    Sabre documentation.
  url: https://sawtooth.hyperledger.org/docs/sabre/releases/latest/
paths:
  # Transactions
  /batch_statuses:
    get:
      tags:
        - Transaction
      summary: Fetches the statuses for a set of batches
      description: |
        Fetches an array of objects with a status and id for each batch
        requested. There are four possible statuses with string values
        `'COMMITTED'`, `'INVALID'`, `'PENDING'`, and `'UNKNOWN'`.
        The batch(es) you want to check can be specified using the `id` filter
        parameter. If a `wait` time is specified in the URL, the API will wait
        to respond until all batches are committed, or the time in seconds has
        elapsed. If the value of `wait` is not set (i.e., `?wait&id=...`), or
        it is set to any non-integer value other than `false`, the wait time
        will be just under the API's specified timeout (usually 300).
        Note that because this route does not return full resources, the
        response will not be paginated, and there will be no `head` or
        `paging` properties.
      operationId: get_batch_statuses_by_id
      parameters:
        - name: id
          in: query
          description: A comma-separated list of batch IDs or data change IDs
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/wait"
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BatchStatusResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Location
  /locations:
    get:
      tags:
        - Locations
      summary: Lists all locations
      operationId: list_locations
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested locations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Locations
      summary: Submits a list of locations to be added
      externalDocs:
        description:
          For more information about the Location data structure, see the Grid website
        url: https://grid.hyperledger.org/docs/0.3/grid_location.html
      description: |
        This endpoint can be used to submit locations to the underlying
        distributed ledger. The operation called by this endpoint will depend on
        which distributed ledger is supporting this deployment of Grid.
        Regardless of the underlying ledger, the body of this request must be a
        valid list of Grid Locations.
        If the Grid Daemon is running against Splinter, then the `service_id`
        query parameter is required for this request. The Grid Daemon will use
        the service ID to forward the transaction to an endpoint on the Splinter
        Daemon for the Scabbard service corresponding to the provided service
        ID.
      operationId: post_locations
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/wait"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostLocations"
        description: A JSON list of Locations
        required: true
      responses:
        "202":
          description: |
            The locations were submitted for validation but have not yet been
            evaluated. After the server receives the locations for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /locations/{location_id}:
    get:
      tags:
        - Locations
      summary: Fetches a single location with the given ID
      operationId: get_location
      parameters:
        - name: location_id
          in: path
          description: ID of the location to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Locations
      summary: Updates a single location with the given ID
      operationId: put_location
      parameters:
        - name: location_id
          in: path
          description: ID of the location to update
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLocation"
        description: A JSON Location
        required: true
      responses:
        "202":
          description: |
            The location was submitted for validation but has not yet been
            evaluated. After the server receives the location for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    delete:
      tags:
        - Locations
      summary: Remove a Location
      operationId: delete_location
      parameters:
        - name: location_id
          in: path
          description: ID of the location to delete
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      responses:
        "202":
          description: |
            The location was submitted for validation but has not yet been
            evaluated. After the server receives the location for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Pike
  /organizations:
    get:
      tags:
        - Pike
      summary: Lists all organizations
      operationId: list_organizations
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested organizations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Pike
      summary: Submits organizations to be added
      externalDocs:
        description:
          For more information about the Pike data structure, see the Grid website
        url: https://grid.hyperledger.org/docs/0.3/grid_pike.html
      description: |
        This endpoint can be used to submit organizations to the underlying
        distributed ledger. The operation called by this endpoint will depend on
        which distributed ledger is supporting this deployment of Grid.
        Regardless of the underlying ledger, the body of this request must be a
        valid list of Grid Organizations.
        If the Grid Daemon is running against Splinter, then the `service_id`
        query parameter is required for this request. The Grid Daemon will use
        the service ID to forward the transaction to an endpoint on the Splinter
        Daemon for the Scabbard service corresponding to the provided service
        ID.
      operationId: post_organizations
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/wait"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostOrganizations"
        description: A JSON list of Organizations
        required: true
      responses:
        "202":
          description: |
            The organizations were submitted for validation but have not yet been
            evaluated. After the server receives the organizations for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  /organizations/{id}:
    get:
      tags:
        - Pike
      summary: Fetches a single organization with the given ID
      operationId: get_organization
      parameters:
        - name: id
          in: path
          description: ID of the organization to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Pike
      summary: Updates a single organization with the given ID
      operationId: put_organization
      parameters:
        - name: id
          in: path
          description: ID of the organization to update
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganization"
        description: A JSON Organization
        required: true
      responses:
        "202":
          description: |
            The organization was submitted for validation but has not yet been
            evaluated. After the server receives the organization for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /organizations/{org_id}/agents:
    get:
      tags:
        - Pike
      summary: Lists all agents
      operationId: list_agents
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the agent belongs to
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested agents.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Pike
      summary: Submits a list of agents to be added to the organization
      operationId: post_agents
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the agents belong to
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostAgents"
        description: A JSON list of Agents
        required: true
      responses:
        "202":
          description: |
            The agents were submitted for validation but have not yet been
            evaluated. After the server receives the agents for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  /organizations/{org_id}/agents/{public_key}:
    get:
      tags:
        - Pike
      summary: Fetches an agent with the given public key
      operationId: get_agent
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the agent belongs to
          required: true
          schema:
            type: string
        - name: public_key
          in: path
          description: Public key of the agent to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the agent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Pike
      summary: |
        Updates a single agent with the given public key belonging to the
        organization with the given org ID
      operationId: put_agent
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the agent belongs to
          required: true
          schema:
            type: string
        - name: public_key
          in: path
          description: Public key of the agent to update
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentPayload"
        description: A JSON Agent
        required: true
      responses:
        "202":
          description: |
            The agent was submitted for validation but has not yet been
            evaluated. After the server receives the agent for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  /organizations/{org_id}/roles:
    get:
      tags:
        - Pike
      summary: Lists all roles for a single organization
      operationId: list_roles_for_organization
      parameters:
        - name: org_id
          in: path
          description: Org ID of the organization to list roles for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the roles for the
            requested organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Pike
      summary: Submits a list of roles to be added to the organization
      operationId: post_roles
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the roles belong to
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRole"
        description: A JSON list of Roles
        required: true
      responses:
        "202":
          description: |
            The roles were submitted for validation but have not yet been
            evaluated. After the server receives the roles for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  /organizations/{org_id}/roles/{role_name}:
    get:
      tags:
        - Pike
      summary: Lists all roles for a single organization
      operationId: get_role_for_organization
      parameters:
        - name: org_id
          in: path
          description: Org ID of the organization the role belongs to
          required: true
          schema:
            type: string
        - name: role_name
          in: path
          description: Role name of the role to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object with the
            role for the requested organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Pike
      summary: |
        Updates a single role with the given role name belonging to the
        organization with the given org ID
      operationId: put_role
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the agent belongs to
          required: true
          schema:
            type: string
        - name: role_name
          in: path
          description: Role name of the role to update
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        description: A JSON Role
        required: true
      responses:
        "202":
          description: |
            The role was submitted for validation but has not yet been
            evaluated. After the server receives the role for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    delete:
      tags:
        - Pike
      summary: Remove a Role
      operationId: delete_role
      parameters:
        - name: org_id
          in: path
          description: ID of the organization the role belongs to
          required: true
          schema:
            type: string
        - name: role_name
          in: path
          description: Role name of the role to delete
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      responses:
        "202":
          description: |
            The role was submitted for validation but has not yet been
            evaluated. After the server receives the role for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Product
  /products:
    get:
      tags:
        - Products
      summary: Lists all products
      operationId: list_products
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Products
      summary: Add a list of products
      operationId: post_products
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostProducts"
        description: A JSON list of Products
        required: true
      responses:
        "202":
          description: |
            The products were submitted for validation but have not yet been
            evaluated. After the server receives the products for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  /products/{product_id}:
    get:
      tags:
        - Products
      summary: Fetches a single product with the given ID
      operationId: get_product
      parameters:
        - name: product_id
          in: path
          description: ID of the product to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Products
      summary: Updates a single product with the given ID
      operationId: put_product
      parameters:
        - name: product_id
          in: path
          description: ID of the product to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProduct"
        description: A JSON Product
        required: true
      responses:
        "202":
          description: |
            The product was submitted for validation but has not yet been
            evaluated. After the server receives the product for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    delete:
      tags:
        - Products
      summary: Deletes a single product with the given ID
      operationId: delete_product
      parameters:
        - name: product_id
          in: path
          description: ID of the product to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      responses:
        "202":
          description: |
            The product delete request was submitted for validation but has not
            yet been evaluated. After the server receives the request for
            validation, it will attempt to execute the transaction contained in
            the batch. If the transaction is successful, the distributed
            ledger's state will be updated and Grid will receive a state delta
            event from the distributed ledger. The Grid Daemon processes this
            event and updates the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  # Purchase Order
  /purchase-orders:
    get:
      tags:
        - Purchase Orders
      summary: Lists all purchase orders
      operationId: list_purchase_orders
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested purchase orders.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Purchase Orders
      summary: Adds a list of purchase orders
      operationId: post_purchase_orders
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostPurchaseOrder"
        description: A JSON list of Purchase Orders
        required: true
      responses:
        "202":
          description: |
            The purchase orders were submitted for validation but have not yet been
            evaluated. After the server receives the purchase orders for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase-orders/{uid}:
    get:
      tags:
        - Purchase Orders
      summary: Fetches a single purchase order with the given UID
      parameters:
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrder"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Purchase Orders
      summary: Updates a single purchase order with the given UID
      parameters:
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePurchaseOrder"
        description: A JSON Purchase Order
        required: true
      responses:
        "202":
          description: |
            The purchase order was submitted for validation but has not yet been
            evaluated. After the server receives the purchase order for validation, it
            will attempt to execute the transaction contained in the batch.
            If the transaction is successful, the distributed ledger's
            state will be updated and Grid will receive a state delta event from the
            distributed ledger. The Grid Daemon processes this event and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase-orders/{uid}/versions:
    get:
      tags:
        - Purchase Orders
      summary: Lists all purchase order versions for a purchase order
      operationId: list_purchase_order_versions
      parameters:
        - name: uid
          in: path
          description: ID of the PO to fetch versions for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order versions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderVersionList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Purchase Orders
      summary: Adds a list of purchase order versions for a purchase order
      operationId: post_purchase_order_versions
      parameters:
        - name: uid
          in: path
          description: ID of the PO to fetch versions for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostPurchaseOrderVersion"
        description: A JSON list of Purchase Order Versions
        required: true
      responses:
        "202":
          description: |
            The versions were submitted for validation but have not yet been
            evaluated. After the server receives the versions for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase-orders/{uid}/versions/{version_id}:
    get:
      tags:
        - Purchase Orders
      summary: Fetches a single purchase order version with the given ID
      operationId: get_purchase_order_version
      parameters:
        - name: version_id
          in: path
          description: ID of the version to fetch
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderVersionList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Purchase Orders
      summary: Updates a single purchase order version with the given ID
      operationId: put_purchase_order_version
      parameters:
        - name: version_id
          in: path
          description: ID of the version to be updated
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO this version belongs to
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurchaseOrderVersionPayload"
        description: A JSON Purchase Order Version
        required: true
      responses:
        "202":
          description: |
            The versions were submitted for validation but have not yet been
            evaluated. After the server receives the versions for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase-orders/{uid}/versions/{version_id}/revisions:
    get:
      tags:
        - Purchase Orders
      summary: Lists all purchase order revisions for a purchase order version
      operationId: list_purchase_order_version_revisions
      parameters:
        - name: version_id
          in: path
          description: ID of the version to fetch
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO to fetch versions for
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order version revisions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderRevisionList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /purchase-orders/{uid}/versions/{version_id}/revisions/{revision_number}:
    get:
      tags:
        - Purchase Orders
      summary: |
        Fetches a single purchase order version revision with the given revision
        number
      operationId: get_purchase_order_revision
      parameters:
        - name: revision_number
          in: path
          description: Number of the revision to fetch
          required: true
          schema:
            type: number
        - name: version_id
          in: path
          description: ID of the version the revision belongs to
          required: true
          schema:
            type: string
        - name: uid
          in: path
          description: ID of the PO the revision belongs to
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the purchase order revision.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseOrderRevision"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"

  # Schema
  /schemas:
    get:
      tags:
        - Schemas
      summary: Lists all schemas
      operationId: list_grid_schemas
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON list of the
            requested schemas.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaList"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    post:
      tags:
        - Schemas
      summary: Add a list of schemas
      operationId: post_grid_schemas
      parameters:
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
        - $ref: "#/components/parameters/page_offset"
        - $ref: "#/components/parameters/page_limit"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostSchemas"
        description: A JSON list of Schemas
        required: true
      responses:
        "202":
          description: |
            The schemas were submitted for validation but have not yet been
            evaluated. After the server receives the schemas for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
  /schemas/{schema_name}:
    get:
      tags:
        - Schemas
      summary: Fetches a single schema with the given name
      operationId: get_schema_by_name
      parameters:
        - name: schema_name
          in: path
          description: Name of the schema to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
      responses:
        "200":
          description: |
            Successful request. The response will include a JSON object
            representing the schema.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
    put:
      tags:
        - Schemas
      summary: Updates a single schema with the given name
      operationId: put_schema
      parameters:
        - name: schema_name
          in: path
          description: Name of the schema to fetch
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/service_id"
        - $ref: "#/components/parameters/event_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSchema"
        description: A JSON Schema
        required: true
      responses:
        "202":
          description: |
            The schema was submitted for validation but has not yet been
            evaluated. After the server receives the schema for validation, it
            will attempt to execute the transactions contained in the batch list.
            If each of the transactions are successful, the distributed ledger's
            state will be updated and Grid will receive state delta events from the
            distributed ledger. The Grid Daemon processes these events and updates
            the Grid database accordingly.
            This means that there is a delay between when transactions are
            submitted and when the new data is actually available to fetch using
            the Grid REST API GET endpoints. This delay can range from a few
            milliseconds to several minutes depending on the underlying ledger.
            Developers should take this delay into account when designing apps
            on top of Grid.
          content:
            application/json:
              schema:
                properties:
                  link:
                    $ref: "#/components/schemas/BatchPostResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "500":
          $ref: "#/components/responses/500ServerError"
        "503":
          $ref: "#/components/responses/503ServiceUnavailable"
components:
  schemas:
    # Location models
    PostLocations:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CreateLocation"
    LocationList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Location"
        paging:
          $ref: "#/components/schemas/Paging"
    Location:
      type: object
      properties:
        location_id:
          type: string
          example: 0099474000005
        location_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    CreateLocation:
      type: object
      properties:
        location_id:
          type: string
          example: 0099474000005
        location_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        target:
          $ref: "#/components/schemas/Target"
    UpdateLocation:
      type: object
      properties:
        location_id:
          type: string
          example: 0099474000005
        location_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        target:
          $ref: "#/components/schemas/Target"

    # Pike models
    PostAgents:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AgentPayload"
    AgentList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Agent"
        paging:
          $ref: "#/components/schemas/Paging"
    Agent:
      properties:
        public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        org_id:
          type: string
          example: 013600
        active:
          type: boolean
          example: "true"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    AgentPayload:
      properties:
        public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        org_id:
          type: string
          example: 013600
        active:
          type: boolean
          example: "true"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"
    PostOrganizations:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CreateOrganization"
    OrganizationList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Organization"
        paging:
          $ref: "#/components/schemas/Paging"
    Organization:
      type: object
      properties:
        id:
          type: string
          example: philips001
        name:
          type: string
          example: Philips
        alternate_ids:
          type: array
          items:
            type: string
            example: test:test
        locations:
          type: array
          items:
            type: string
            example: 0012276598822
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    CreateOrganization:
      type: object
      properties:
        id:
          type: string
          example: philips001
        name:
          type: string
          example: Philips
        alternate_ids:
          type: array
          items:
            type: string
            example: test:test
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"
    UpdateOrganization:
      type: object
      properties:
        id:
          type: string
          example: philips001
        name:
          type: string
          example: Philips
        locations:
          type: array
          items:
            type: string
            example: 0012276598822
        alternate_ids:
          type: array
          items:
            type: string
            example: test:test
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"
    PostRole:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    RoleList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        paging:
          $ref: "#/components/schemas/Paging"
    Role:
      type: object
      properties:
        name:
          type: string
          example: alpha.Drivers
        org_id:
          type: string
          example: 314156
        description:
          type: string
          example: "What this role is for"
        permissions:
          type: array
          items:
            type: string
            example: tank::can_drive
        allowed_organizations:
          type: array
          items:
            type: string
            example: beta
        inherit_from:
          type: array
          items:
            type: string
            example: beta.Tank
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"

    # Product models
    PostProducts:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CreateProduct"
    ProductList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        paging:
          $ref: "#/components/schemas/Paging"
    Product:
      type: object
      properties:
        product_id:
          type: string
          example: 00122765988220
        product_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    CreateProduct:
      type: object
      properties:
        product_id:
          type: string
          example: 00122765988220
        product_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        owner:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"
    UpdateProduct:
      type: object
      properties:
        product_id:
          type: string
          example: 00122765988220
        product_namespace:
          $ref: "#/components/schemas/NamespaceEnum"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"

    # Purchase Order models
    PostPurchaseOrder:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CreatePurchaseOrder"
    PurchaseOrder:
      type: object
      properties:
        uid:
          type: string
          example: 0099474000005
        workflow_state:
          type: string
          example: create
        buyer_org_id:
          type: string
          example: "Org 1"
        seller_org_id:
          type: string
          example: "Org 2"
        is_closed:
          type: boolean
          example: false
        alternate_ids:
          type: array
          items:
            type: string
            example: "type:id"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderVersion"
        created_at:
          $ref: "#/components/schemas/Timestamp"
        workflow_id:
          type: string
          example: collaborative::v1
        service_id:
          $ref: "#/components/schemas/ServiceID"
    CreatePurchaseOrder:
      type: object
      properties:
        uid:
          type: string
          example: 0099474000005
        workflow_state:
          type: string
          example: create
        buyer_org_id:
          type: string
          example: "Org 1"
        seller_org_id:
          type: string
          example: "Org 2"
        create_version_payload:
          type: object
          items:
            $ref: "#/components/schemas/PurchaseOrderVersion"
        alternate_ids:
          type: array
          items:
            type: string
            example: "type:id"
        created_at:
          $ref: "#/components/schemas/Timestamp"
        workflow_id:
          type: string
          example: collaborative::v1
        service_id:
          $ref: "#/components/schemas/ServiceID"
        target:
          $ref: "#/components/schemas/Target"
    UpdatePurchaseOrder:
      type: object
      properties:
        po_uid:
          type: string
          example: 0099474000005
        workflow_state:
          type: string
          example: create
        is_closed:
          type: boolean
          example: false
        accepted_version_number:
          type: string
          example: 1
        version_updates:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderVersion"
        alternate_ids:
          type: array
          items:
            type: string
            example: "type:id"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        target:
          $ref: "#/components/schemas/Target"
    PurchaseOrderList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrder"
        paging:
          $ref: "#/components/schemas/Paging"
    PostPurchaseOrderVersion:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderVersionPayload"
    PurchaseOrderVersion:
      properties:
        version_id:
          type: string
          example: 1
        workflow_state:
          type: string
          example: create
        is_draft:
          type: boolean
          example: true
        current_revision_number:
          type: number
          example: 3
        revisions:
          type: array
          items:
            type: number
        service_id:
          $ref: "#/components/schemas/ServiceID"
    PurchaseOrderVersionList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderVersion"
        paging:
          $ref: "#/components/schemas/Paging"
    PurchaseOrderVersionPayload:
      properties:
        version_id:
          type: string
          example: 1
        workflow_state:
          type: string
          example: create
        is_draft:
          type: boolean
          example: true
        current_revision_number:
          type: number
          example: 3
        revisions:
          type: array
          items:
            type: number
        service_id:
          $ref: "#/components/schemas/ServiceID"
        target:
          $ref: "#/components/schemas/Target"
    PurchaseOrderRevision:
      properties:
        revision_number:
          type: number
          example: 7
        submitter:
          type: string
          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612
        created_at:
          $ref: "#/components/schemas/Timestamp"
        order_xml_v3_4:
          type: string
          example: "<xml content>"
        service_id:
          $ref: "#/components/schemas/ServiceID"
    PurchaseOrderRevisionList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseOrderRevision"
        paging:
          $ref: "#/components/schemas/Paging"

    # Schema models
    PostSchemas:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CreateSchema"
    SchemaList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Schema"
        paging:
          $ref: "#/components/schemas/Paging"
    Schema:
      properties:
        name:
          type: string
          example: Lightbulb
        description:
          type: string
          example: Example Lightbulb schema
        owner:
          type: string
          example: philips001
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
    CreateSchema:
      properties:
        name:
          type: string
          example: Lightbulb
        description:
          type: string
          example: Example Lightbulb schema
        owner:
          type: string
          example: philips001
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"
    UpdateSchema:
      properties:
        name:
          type: string
          example: Lightbulb
        owner:
          type: string
          example: philips001
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        service_id:
          $ref: "#/components/schemas/ServiceID"
        last_updated:
          $ref: "#/components/schemas/Timestamp"
        target:
          $ref: "#/components/schemas/Target"
    PropertyDefinition:
      properties:
        name:
          type: string
          example: size
        data_type:
          $ref: "#/components/schemas/DataTypeEnum"
        description:
          type: string
          example: Lightbulb radius, in millimeters
        required:
          type: boolean
          example: true
        value:
          type: string
          example: 20
    DataTypeEnum:
      type: string
      enum:
        - STRING
        - BOOLEAN
        - NUMBER
        - BYTES
        - ENUM
        - STRUCT
        - LOCATION
    PropertyValue:
      type: object
      properties:
        name:
          type: string
          example: is_current
        data_type:
          type: string
          example: boolean
        value:
          type: string
          example: false
    BytesValue:
      type: string
      format: byte
      example: "AQIDBA=="
    LatLong:
      type: object
      properties:
        latitude:
          type: integer
          example: 46786299
        longitude:
          type: integer
          example: -92051336
    StructPropertyValue:
      type: object
      properties:
        name:
          type: string
          example: location
        type:
          $ref: "#/components/schemas/DataTypeEnum"
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: integer
              format: int64
            - type: integer
              format: int32
            - $ref: "#/components/schemas/StructValue"
            - $ref: "#/components/schemas/LatLong"
            - $ref: "#/components/schemas/BytesValue"
          example: "AQIDBA=="
    StructValue:
      type: array
      items:
        $ref: "#/components/schemas/StructPropertyValue"

    Paging:
      type: object
      properties:
        current:
          type: string
          description: Link to the current page
          example: /agent?offset0&limit=10
        offset:
          type: integer
          description: Index of first element in page
          example: 0
        limit:
          type: integer
          description: The maximum number of elements per page
          example: 10
        total:
          type: integer
          description: The total number of elements that exist
          example: 1000
        prev:
          type: string
          description: Link to previous page
          example: /agent?offset=0&limit=10
        next:
          type: string
          description: Link to next page
          example: /agent?offset=10&limit=10
        last:
          type: string
          description: Link to last page
          example: /agent?offset100&limit=10

    # Transaction models
    BatchPostResponse:
      properties:
        batch_id:
          type: string
          example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd
        event_id:
          type: string
          example: abc123
    BatchStatusResponse:
      properties:
        batch_id:
          type: string
          example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd
        event_id:
          type: string
          example: abc123
        status:
          type: string
          example: pending

    # Shared models
    Timestamp:
      type: integer
      example: 1557949075
    Metadata:
      type: object
      properties:
        key1:
          type: string
          example: value1
    ServiceID:
      type: string
      example: "12345-QWERTY:gsAA"
    NamespaceEnum:
      type: string
      enum:
        - UNSET_NAMESPACE
        - GS1
    Target:
      type: string
      description: Endpoint to handle a payload
      example: "POST /organizations"
      required: false

  parameters:
    batch_id:
      name: batch_id
      in: path
      required: true
      description: |
        The Batch ID uniquely identifies a batch. It is a signature derived from
        signing the batch header with the batcher's key.
      schema:
        type: string
    event_id:
      name: event_id
      in: header
      required: false
      description: Natural key for batch being submitted
      schema:
        type: string
    service_id:
      name: service_id
      in: query
      description: |
        The ID of the service the request should be sent to. This parameter is
        required if running on Splinter.
        Format: \<circuit-id\>::\<service-id\>
      required: false
      schema:
        type: string
    wait:
      name: wait
      in: query
      description: |
        The number of seconds to wait for batches to be committed before
        returning.
      schema:
        type: integer
    page_offset:
      name: offset
      in: query
      description: |
        The index of the first element to be in the page
      schema:
        type: integer
    page_limit:
      name: limit
      in: query
      description: |
        The maximum number of elements in a page
      schema:
        type: integer

  responses:
    # Error responses
    400BadRequest:
      description: |
        The Grid Daemon REST API could not understand the request due to invalid
        syntax. Normally this will indicate an invalid query parameter or a
        malformed payload.
      content:
        application/json:
          schema:
            type: string
            example: |
              Circuit ID is not present, but Grid is running in Splinter mode.
    404NotFound:
      description: |
        The requested resource did not exist. This can either mean that the
        endpoint is invalid, that there is no resource with the specified ID.
      content:
        application/json:
          schema:
            type: string
            example: "Not Found Error: No resource with that ID exists."
    500ServerError:
      description: |
        Something went wrong within the Grid Daemon. This normally is not
        something that the user has control over. If this type of error occurs,
        the message returned by the REST API may be generic. The server admin
        may have to look through the Grid Daemon service's logs to determine
        the cause of the server error.
      content:
        application/json:
          schema:
            type: string
            example: Internal Server Error
    503ServiceUnavailable:
      description: |
        The Grid Daemon service or a connected service is unavailable. This can
        occur when the Grid Daemon cannot reach the underlying distributed
        ledger service or the Grid database.
      content:
        application/json:
          schema:
            type: string
            example: Service Unavailable
